name: React Native Build & Test

on:
  push:
    branches:
      - main
      - develop
      - react-native
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  XCODE_VERSION: '15.4'

jobs:
  # ==============================================================================
  # Code Quality & Testing
  # ==============================================================================
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: Cache Metro bundler
        uses: actions/cache@v4
        with:
          path: |
            ~/.metro
            node_modules/.cache/metro
          key: ${{ runner.os }}-metro-${{ hashFiles('metro.config.js', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-metro-

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

      - name: Run Jest tests
        run: |
          npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml
          retention-days: 30

      - name: Upload coverage reports
        if: always()
        run: |
          # Upload coverage to GitHub Pages or artifact instead of third-party service
          echo "Coverage report generated and available in artifacts"
          echo "Coverage summary:"
          if [ -f coverage/coverage-summary.json ]; then
            cat coverage/coverage-summary.json
          fi

  # ==============================================================================
  # Android Build
  # ==============================================================================
  android:
    name: Android Build
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        build_type:
          - debug
          - release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        run: |
          # Install Android SDK components
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install npm dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Extract version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=${{ github.run_number }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "version_name=${VERSION}-${BUILD_NUMBER}" >> $GITHUB_OUTPUT

      - name: Update Android version
        run: |
          VERSION_CODE=${{ steps.version.outputs.build_number }}
          VERSION_NAME="${{ steps.version.outputs.version_name }}"

          # Update version in build.gradle
          sed -i "s/versionCode .*/versionCode ${VERSION_CODE}/" android/app/build.gradle
          sed -i "s/versionName .*/versionName \"${VERSION_NAME}\"/" android/app/build.gradle

      - name: Build Android ${{ matrix.build_type }}
        run: |
          cd android
          if [ "${{ matrix.build_type }}" = "release" ]; then
            ./gradlew assembleRelease --no-daemon --stacktrace
          else
            ./gradlew assembleDebug --no-daemon --stacktrace
          fi

      - name: Run Android tests
        run: |
          cd android
          ./gradlew testDebugUnitTest --no-daemon

      - name: Upload Android ${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.build_type }}-${{ steps.version.outputs.version_name }}
          path: |
            android/app/build/outputs/apk/${{ matrix.build_type }}/*.apk
            android/app/build/outputs/mapping/${{ matrix.build_type }}/mapping.txt
          retention-days: 30

  # ==============================================================================
  # iOS Build
  # ==============================================================================
  ios:
    name: iOS Build
    runs-on: macos-14
    needs: quality

    strategy:
      matrix:
        build_type:
          - debug
          - release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Xcode
        run: |
          # Use latest available Xcode version
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods
            ~/Library/Caches/CocoaPods
            ios/Pods
            ios/build
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install npm dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Ruby dependencies
        run: |
          cd ios
          bundle install --jobs 4 --retry 3

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install --repo-update

      - name: Extract version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=${{ github.run_number }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT

      - name: Update iOS version
        run: |
          cd ios
          # Update version in Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ steps.version.outputs.version }}" bscan/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ steps.version.outputs.build_number }}" bscan/Info.plist

      - name: Build iOS ${{ matrix.build_type }}
        run: |
          cd ios
          if [ "${{ matrix.build_type }}" = "release" ]; then
            xcodebuild -workspace bscan.xcworkspace \
              -scheme bscan \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath $PWD/build/bscan.xcarchive \
              archive
              
            xcodebuild -exportArchive \
              -archivePath $PWD/build/bscan.xcarchive \
              -exportPath $PWD/build \
              -exportOptionsPlist exportOptions.plist
          else
            xcodebuild -workspace bscan.xcworkspace \
              -scheme bscan \
              -configuration Debug \
              -destination generic/platform=iOS \
              -archivePath $PWD/build/bscan.xcarchive \
              archive
          fi

      - name: Upload iOS ${{ matrix.build_type }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ matrix.build_type }}-${{ steps.version.outputs.version }}-${{ steps.version.outputs.build_number }}
          path: |
            ios/build/*.ipa
            ios/build/bscan.xcarchive
          retention-days: 30

  # ==============================================================================
  # Bundle Analysis & Security
  # ==============================================================================
  analysis:
    name: Bundle Analysis & Security
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate --production
        continue-on-error: true

      - name: Bundle analysis
        run: |
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output /tmp/bundle.js \
            --assets-dest /tmp/assets
            
          echo "Bundle size (Android):" $(wc -c < /tmp/bundle.js) "bytes"

          npx react-native bundle \
            --platform ios \
            --dev false \
            --entry-file index.js \
            --bundle-output /tmp/bundle-ios.js \
            --assets-dest /tmp/assets-ios
            
          echo "Bundle size (iOS):" $(wc -c < /tmp/bundle-ios.js) "bytes"

      - name: Dependency tree analysis
        run: |
          npm ls --depth=0 > dependency-tree.txt
          echo "Direct dependencies:" $(npm ls --depth=0 --parseable | wc -l)

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            dependency-tree.txt
          retention-days: 30

  # ==============================================================================
  # Release Management
  # ==============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - quality
      - android
      - ios
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=${{ github.run_number }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "release_name=v${VERSION}-${BUILD_NUMBER}" >> $GITHUB_OUTPUT

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: android-*
          path: ./artifacts/
          merge-multiple: true

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ios-*
          path: ./artifacts/
          merge-multiple: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.release_name }}
          release_name: B-Scan React Native ${{ steps.version.outputs.release_name }}
          body: |
            ## B-Scan React Native Release ${{ steps.version.outputs.release_name }}

            **Build Information:**
            - Version: ${{ steps.version.outputs.version }}
            - Build: ${{ steps.version.outputs.build_number }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}

            **Artifacts:**
            - Android Debug & Release APKs
            - iOS Debug & Release Archives

            **Features:**
            - NFC/RFID tag scanning for filament spools
            - Material 3 design with React Native Paper
            - Cross-platform inventory management
            - Real-time scan progress tracking

            **Requirements:**
            - Android: API 24+ (Android 7.0) with NFC support
            - iOS: iOS 13.0+ with NFC support
          draft: false
          prerelease: ${{ contains(github.ref_name, 'develop') || contains(github.ref_name, 'beta') }}

      - name: Upload Android Release APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/app-release.apk
          asset_name: bscan-android-${{ steps.version.outputs.release_name }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Android Debug APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/app-debug.apk
          asset_name: bscan-android-debug-${{ steps.version.outputs.release_name }}.apk
          asset_content_type: application/vnd.android.package-archive
