name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  GRADLE_OPTS: >-
    -Dorg.gradle.daemon=true
    -Dorg.gradle.parallel=true
    -Dorg.gradle.workers.max=4
    -Dorg.gradle.configuration-cache=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.vfs.watch=true
    -Dkotlin.incremental=true
    -Dkotlin.incremental.useClasspathSnapshot=true
    -Xmx4g
    -XX:+UseG1GC
    -XX:MaxMetaspaceSize=1g
  KOTLIN_INCREMENTAL: true

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Run lint checks
      run: ./gradlew lint
      continue-on-error: true
      
    - name: Upload lint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-reports
        path: |
          app/build/reports/lint-results*.html
          app/build/reports/lint-results*.xml
        retention-days: 7

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-reports
        path: |
          app/build/reports/tests/
          app/build/test-results/
        retention-days: 7

  # Job 3: Build Debug APK (runs for both PR and main branch)
  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Build debug APK
      uses: ./.github/actions/build-android
      with:
        build-type: Debug
        
    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 7

  # Job 4: Build and Release (only on main branch)
  build-and-release:
    name: Build & Release
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [code-quality, unit-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for semantic-release
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        
    - name: Install semantic-release and plugins
      run: |
        npm install --save-dev \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/github \
          @semantic-release/commit-analyzer \
          @semantic-release/release-notes-generator
      
    - name: Calculate next version from semantic-release
      id: semantic_version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Run semantic-release dry-run to get next version
        DRY_RUN_OUTPUT=$(npx semantic-release --dry-run --no-ci 2>&1 || true)
        
        # Extract version from dry-run output
        NEXT_VERSION=$(echo "$DRY_RUN_OUTPUT" | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "")
        
        # If no new version, check if we should skip
        if [ -z "$NEXT_VERSION" ]; then
          echo "No new version to release - checking for existing version"
          # Get current version from git tags
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          echo "No new release needed, current version: $CURRENT_VERSION"
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Calculate version code from git commit count
        VERSION_CODE=$(git rev-list --count HEAD)
        
        echo "should_release=true" >> $GITHUB_OUTPUT
        echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        
        echo "Next release version: $NEXT_VERSION (code: $VERSION_CODE)"
      
    - name: Create version.txt with semantic version
      if: steps.semantic_version.outputs.should_release == 'true'
      run: |
        echo "${{ steps.semantic_version.outputs.version }}" > version.txt
        echo "Created version.txt with version: ${{ steps.semantic_version.outputs.version }}"
        
    - name: Update Android app version in build.gradle.kts
      if: steps.semantic_version.outputs.should_release == 'true'
      run: |
        VERSION="${{ steps.semantic_version.outputs.version }}"
        VERSION_CODE="${{ steps.semantic_version.outputs.version_code }}"
        
        # Update versionCode and versionName in build.gradle.kts
        sed -i.bak "s/versionCode = .*/versionCode = $VERSION_CODE/" app/build.gradle.kts
        sed -i.bak "s/versionName = .*/versionName = \"$VERSION\"/" app/build.gradle.kts
        
        # Remove backup files
        rm -f app/build.gradle.kts.bak
        
        echo "Updated app/build.gradle.kts:"
        echo "  versionCode = $VERSION_CODE"
        echo "  versionName = \"$VERSION\""
        
    - name: Build release APK and AAB
      if: steps.semantic_version.outputs.should_release == 'true'
      uses: ./.github/actions/build-android
      with:
        build-type: Release
        build-aab: 'true'
        
    - name: Upload release artifacts for other jobs
      if: steps.semantic_version.outputs.should_release == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          app/build/outputs/apk/release/*.apk
          app/build/outputs/bundle/release/*.aab
        retention-days: 30
        
    - name: Run semantic-release
      if: steps.semantic_version.outputs.should_release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: semantic-release-bot
        GIT_AUTHOR_EMAIL: semantic-release-bot@users.noreply.github.com
        GIT_COMMITTER_NAME: semantic-release-bot
        GIT_COMMITTER_EMAIL: semantic-release-bot@users.noreply.github.com
      run: npx semantic-release
      
    - name: Commit changelog and version updates
      if: steps.semantic_version.outputs.should_release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git for the semantic-release-bot
        git config --local user.name "semantic-release-bot"
        git config --local user.email "semantic-release-bot@users.noreply.github.com"
        
        # Add changelog and version files if they exist and have changes
        if [ -f "CHANGELOG.md" ]; then
          git add CHANGELOG.md
        fi
        if [ -f "version.txt" ]; then
          git add version.txt
        fi
        if [ -f "app/build.gradle.kts" ]; then
          git add app/build.gradle.kts
        fi
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "No changes to commit"
        else
          # Create the documentation commit
          git commit -m "chore(release): update version to ${{ steps.semantic_version.outputs.version }} [skip ci]

- Update CHANGELOG.md with release notes
- Update version.txt to ${{ steps.semantic_version.outputs.version }}
- Update app/build.gradle.kts versionCode to ${{ steps.semantic_version.outputs.version_code }}
- Update app/build.gradle.kts versionName to ${{ steps.semantic_version.outputs.version }}

Auto-generated by semantic-release workflow."
          
          # Push the changes
          git push origin main
          echo "Successfully committed and pushed all version updates"
        fi

  # Job 5: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Run security-focused lint checks
      run: ./gradlew lint --continue
      continue-on-error: true
      
    - name: Upload security scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-reports
        path: |
          app/build/reports/lint-results*.html
          app/build/reports/lint-results*.xml
        retention-days: 7

  # Job 6: Instrumented Tests (Android Emulator) - Only on main branch for full CI
  instrumented-tests:
    name: Instrumented Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-debug]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-34
        
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 34
        target: google_apis
        arch: x86_64
        profile: pixel_6
        ram-size: 3584M
        heap-size: 1024M
        disk-size: 8192M
        disable-animations: true
        disable-spellchecker: true
        force-avd-creation: false
        emulator-options: >-
          -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim 
          -camera-back none -camera-front none -qemu -m 3584
          -netdelay none -netspeed full -accel on
        script: echo "Generated AVD snapshot for caching."
        
    - name: Run core instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 34
        target: google_apis
        arch: x86_64
        profile: pixel_6
        ram-size: 3584M
        heap-size: 1024M
        disk-size: 8192M
        disable-animations: true
        disable-spellchecker: true
        force-avd-creation: false
        emulator-options: >-
          -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim 
          -camera-back none -camera-front none -qemu -m 3584
          -netdelay none -netspeed full -accel on
        script: |
          # Run only critical tests for CI with optimised Gradle settings
          ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.bscan.CIBasicTest --parallel --build-cache
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: instrumented-test-reports
        path: |
          app/build/reports/androidTests/
          app/build/test-results/connected/
        retention-days: 7

  # Job 7: Performance Analysis (only on main branch)
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Analyze APK size
      run: |
        APK_PATH="app/build/outputs/apk/release/app-release.apk"
        if [ -f "$APK_PATH" ]; then
          APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH")
          echo "APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          echo "apk_size_mb=$(($APK_SIZE / 1024 / 1024))" >> $GITHUB_ENV
        fi
        
    - name: Generate build scan
      run: ./gradlew build --scan
      continue-on-error: true

  # Job 9: Build Summary (always runs, summarises results)
  notify:
    name: Build Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, unit-tests, build-debug, build-release, security-scan, instrumented-tests, performance-analysis, semantic-release]
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Debug | ${{ needs.build-debug.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Release | ${{ needs.build-release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Instrumented Tests | ${{ needs.instrumented-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Analysis | ${{ needs.performance-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semantic Release | ${{ needs.semantic-release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add PR-specific summary
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "### 📋 Pull Request Build" >> $GITHUB_STEP_SUMMARY
          echo "- Debug APK built and available for download" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality and unit tests completed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add main branch specific summary
        if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "push" ]; then
          echo "### 🎯 Main Branch Build" >> $GITHUB_STEP_SUMMARY
          echo "- Full CI pipeline completed" >> $GITHUB_STEP_SUMMARY
          echo "- Release artifacts generated" >> $GITHUB_STEP_SUMMARY
          echo "- Instrumented tests executed" >> $GITHUB_STEP_SUMMARY
          echo "- Performance analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- Semantic release processed" >> $GITHUB_STEP_SUMMARY
        fi