name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  GRADLE_OPTS: >-
    -Dorg.gradle.daemon=true
    -Dorg.gradle.parallel=true
    -Dorg.gradle.workers.max=4
    -Dorg.gradle.configuration-cache=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.vfs.watch=true
    -Dkotlin.incremental=true
    -Dkotlin.incremental.useClasspathSnapshot=true
    -Xmx4g
    -XX:+UseG1GC
    -XX:MaxMetaspaceSize=1g
  KOTLIN_INCREMENTAL: true

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Run lint checks
      run: ./gradlew lint
      continue-on-error: true
      
    - name: Upload lint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-reports
        path: |
          app/build/reports/lint-results*.html
          app/build/reports/lint-results*.xml
        retention-days: 7

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-reports
        path: |
          app/build/reports/tests/
          app/build/test-results/
        retention-days: 7

  # Job 3: Build Debug APK (runs for both PR and main branch)
  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Build debug APK
      uses: ./.github/actions/build-android
      with:
        build-type: Debug
        
    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 7

  # Job 4: Build and Release (only on main branch)
  build-and-release:
    name: Build & Release
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [code-quality, unit-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version_code: ${{ steps.calculate_version.outputs.version_code }}
      version_name: ${{ steps.calculate_version.outputs.version_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for semantic-release
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        
    - name: Install semantic-release and plugins
      run: |
        npm install --save-dev \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/github \
          @semantic-release/commit-analyzer \
          @semantic-release/release-notes-generator
      
    - name: Calculate version
      id: calculate_version
      run: |
        # Calculate version code from git commit count (deterministic)
        VERSION_CODE=$(git rev-list --count HEAD)
        
        # Calculate version name from git commit count and short hash
        SHORT_HASH=$(git rev-parse --short HEAD)
        VERSION_NAME="1.0.$VERSION_CODE"
        
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT
        
        echo "Calculated version: $VERSION_NAME (code: $VERSION_CODE, hash: $SHORT_HASH)"
      
    - name: Build release APK and AAB
      uses: ./.github/actions/build-android
      with:
        build-type: Release
        build-aab: 'true'
        version-code: ${{ steps.calculate_version.outputs.version_code }}
        version-name: ${{ steps.calculate_version.outputs.version_name }}
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          app/build/outputs/apk/release/*.apk
          app/build/outputs/bundle/release/*.aab
        retention-days: 30

  # Job 5: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Run security-focused lint checks
      run: ./gradlew lint --continue
      continue-on-error: true
      
    - name: Upload security scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-reports
        path: |
          app/build/reports/lint-results*.html
          app/build/reports/lint-results*.xml
        retention-days: 7

  # Job 6: Instrumented Tests (Android Emulator) - Only on main branch for full CI
  instrumented-tests:
    name: Instrumented Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-debug]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-34
        
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 34
        target: google_apis
        arch: x86_64
        profile: pixel_6
        ram-size: 3584M
        heap-size: 1024M
        disk-size: 8192M
        disable-animations: true
        disable-spellchecker: true
        force-avd-creation: false
        emulator-options: >-
          -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim 
          -camera-back none -camera-front none -qemu -m 3584
          -netdelay none -netspeed full -accel on
        script: echo "Generated AVD snapshot for caching."
        
    - name: Run core instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 34
        target: google_apis
        arch: x86_64
        profile: pixel_6
        ram-size: 3584M
        heap-size: 1024M
        disk-size: 8192M
        disable-animations: true
        disable-spellchecker: true
        force-avd-creation: false
        emulator-options: >-
          -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim 
          -camera-back none -camera-front none -qemu -m 3584
          -netdelay none -netspeed full -accel on
        script: |
          # Run only critical tests for CI with optimised Gradle settings
          ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.bscan.CIBasicTest --parallel --build-cache
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: instrumented-test-reports
        path: |
          app/build/reports/androidTests/
          app/build/test-results/connected/
        retention-days: 7

  # Job 7: Performance Analysis (only on main branch)
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Android environment
      uses: ./.github/actions/setup-android
      
    - name: Analyze APK size
      run: |
        APK_PATH="app/build/outputs/apk/release/app-release.apk"
        if [ -f "$APK_PATH" ]; then
          APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH")
          echo "APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          echo "apk_size_mb=$(($APK_SIZE / 1024 / 1024))" >> $GITHUB_ENV
        fi
        
    - name: Generate build scan
      run: ./gradlew build --scan
      continue-on-error: true

  # Job 8: Semantic Release (only on main branch after all quality gates pass)
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: 
      # - code-quality
      # - unit-tests
      - build-release
      # - security-scan
      # - instrumented-tests
      # - performance-analysis
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for semantic-release
          persist-credentials: false
      
      - name: Setup Android environment
        uses: ./.github/actions/setup-android
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      
      - name: Install semantic-release and plugins
        run: |
          npm install --save-dev \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator
      
      - name: Update version.txt for semantic-release
        run: |
          # Create version.txt if it doesn't exist
          if [ ! -f version.txt ]; then
            echo "1.0.0" > version.txt
          fi
      
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: semantic-release-bot
          GIT_AUTHOR_EMAIL: semantic-release-bot@users.noreply.github.com
          GIT_COMMITTER_NAME: semantic-release-bot
          GIT_COMMITTER_EMAIL: semantic-release-bot@users.noreply.github.com
        run: npx semantic-release

  # Job 9: Build Summary (always runs, summarises results)
  notify:
    name: Build Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, unit-tests, build-debug, build-release, security-scan, instrumented-tests, performance-analysis, semantic-release]
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Debug | ${{ needs.build-debug.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Release | ${{ needs.build-release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Instrumented Tests | ${{ needs.instrumented-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Analysis | ${{ needs.performance-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semantic Release | ${{ needs.semantic-release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add PR-specific summary
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "### 📋 Pull Request Build" >> $GITHUB_STEP_SUMMARY
          echo "- Debug APK built and available for download" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality and unit tests completed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add main branch specific summary
        if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "push" ]; then
          echo "### 🎯 Main Branch Build" >> $GITHUB_STEP_SUMMARY
          echo "- Full CI pipeline completed" >> $GITHUB_STEP_SUMMARY
          echo "- Release artifacts generated" >> $GITHUB_STEP_SUMMARY
          echo "- Instrumented tests executed" >> $GITHUB_STEP_SUMMARY
          echo "- Performance analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- Semantic release processed" >> $GITHUB_STEP_SUMMARY
        fi